/*
█▀ █▄█ █▀▀ █░█ █▀▀ █░█
▄█ ░█░ █▄▄ █▀█ ██▄ ▀▄▀

Author: <Anton Sychev> (anton at sychev dot xyz)
index.js (c) 2022
Created:  2022-09-29 22:03:30 
Desc: Credits-log plugin add credits to your porject   
TODO: 
	* correct shell global install script
	* in vite plugin config if have multiply entries inputs, set where you want to add credits
*/

import path from "node:path";
import fs from "node:fs";

export default (options = {}) => {
	return {
		name: "credits-log",

		/**
		 * FrontEnd Part get parts of credits from package.json and add to console.info
		 * This is where the code that is injected into the build process and displayed in the console is compiled
		 * @param {*} code
		 * @param {*} chunk
		 * @returns
		 */
		async renderChunk(code, chunk) {
			let pkg = fs.readFileSync(path.resolve(".", "package.json"), "utf8");
			pkg = JSON.parse(pkg);

			if (chunk.isEntry) {
				if (!pkg.credits) {
					console.log(
						"No credits array found in your 'package.json' file. Run command 'credits-log help'."
					);
					return;
				}

				const cl_data = pkg.credits.join("");
				let authorEntry = `.replace("%a", "")`;
				let contributorsEntry = `.replace("%c", "")`;
				let licenseEntry = `.replace("%l", "")`;
				const version = `.replace("%b", "Build: ${pkg.version}")`;

				const name = pkg.projectName || pkg.name;
				let projectName = `.replace("%p", "Project: ${name}")`;

				if (pkg.author) {
					const author = /string/gim.test(typeof pkg.author)
						? "\\t" + pkg.author
						: "\\t" + pkg.author.join("\\n");
					authorEntry = `.replace("%a", "Author: \\n${author}")`;
				}

				if (pkg.contributors) {
					const contributors = /string/gim.test(typeof pkg.contributors)
						? "\\t" + pkg.contributors
						: "\\t" + pkg.contributors.join("\\n\\t");

					contributorsEntry = `.replace("%c", "Contributors: \\n${contributors}")`;
				}

				if (pkg.license)
					licenseEntry = `.replace("%l", "License: ${pkg.license}")`;

				const frontEnd = !options.frontEnd
					? ""
					: String.raw`window.addEventListener("keyup", (e) => {e.preventDefault();if(e.keyCode===112){const clBody=document.querySelector('.cl-body');if(clBody) clBody.remove();document.body.innerHTML += '<div class="cl-body" style="position: fixed;top: 50%;left: 50%;transform: translate(-50%, -50%);padding: 1em;font-size: 12px;font-family: Helvetica Light, Helvetica, Arial, sans-serif;font-weight: lighter;color: #808080;min-height: 200px;background: #fff;border-radius: 12px;border: 1px solid #ccccccb5;z-index: 999;"><span class="cl-x" style="position:absolute;top:10px;right:10px;cursor:pointer">&times;</span><div style="display:flex;justify-content:center;align-items:center;">'+c[2](c[1])+'</div></div>';document.querySelector('.cl-x').addEventListener("click", (e) => {e.preventDefault();if(e.target.classList.contains('cl-x')) document.querySelector('.cl-body').remove()});}})`;
				const resultOut = String.raw`(function(){const d="${cl_data}",c=['color:#808080;font-size:12px;font-family:"Helvetica Light","Helvetica",Arial,sans-serif;font-weight:lighter;',d.match(new RegExp(".{1,4}", "g")).map((r) => String.fromCodePoint(r)).join("")${projectName}${authorEntry}${contributorsEntry}${licenseEntry}${version},(x)=>x.replace(new RegExp("(\<|\>)", "g"),"").replace(new RegExp("\t", "g"), "&emsp;").replace(new RegExp("\n", "g"),"<br>")];console.info("%c "+c[1],c[0]);${frontEnd}})();`;

				return `${resultOut}${code}`;
			}
		},

		/**
		 * Banner shows on build process guy with right hand up.
		 */
		buildEnd() {
			const banner = [
				"0010003200320032003200320032003200320032003200320032004500640064006400580032003200320032",
				"0032003200320061003700640064003700430032003200320032003200320032003200320032003200320032",
				"0032003200320032001000320032003200320032003200320032003200320032003200640064006400350032",
				"0032003200320032003200610064006400640064006400640043003200320032003200320032003200320032",
				"0032003200320032003200320032001000320032003200320032003200320032003200320032003200450064",
				"0064006400350032003200320032003200580064006400640064006400640045003200320032003200320032",
				"0032003200320032003200320032003200320032001000320032003200320032003200320032003200320032",
				"0032003200450064006400640064004300460032003200320032006100430043006100460032003200320032",
				"0032003200320032003200320032003200320032003200320032001000320032003200320032003200320032",
				"0032003200320032003200320032004300640064006400640064003500430043004300430043004300430061",
				"0045004600320032003200320032003200320032003200320032003200320032001000320032003200320032",
				"0032003200320032003200320032003200320032003200320045004200370064006400640064006400640064",
				"0064006400640064006400350058003200320032003200320032003200320032003200320032001000320032",
				"0032003200320032003200320032003200320032003200320032003200320032003200320045006400640064",
				"0064006400640064006400640064006400640037003200320032003200320032003200320032003200320032",
				"0010003200320032003200320032003200320032003200320032003200320032003200320032003200320045",
				"0064006400640064006400640064006400640037003700640035003200320032003200320032003200320032",
				"0032003200320010003200320032003200320032003200320032003200320032003200320032003200320032",
				"0032003200450064006400640064006400640064006400640042006400640058003200320032003200320032",
				"0032003200320032003200320010003200320032003200320032003200320032003200320032003200320032",
				"0032003200320032003200450064006400640064006400640064006400350037006400350032003200320032",
				"0032003200320032003200320032003200320010003200320032003200320032003200320032003200320032",
				"0032003200320032003200320032003200450064006400640064006400640064006400420064006400580032",
				"0032003200320032003200320032003200320032003200320010003200320032003200320032003200320032",
				"0032003200320032003200320032003200320032003200450064006400640064006400640064006400350035",
				"0042003200320032003200320032003200320032003200320032003200320010003200320032003200320032",
				"0032003200320032003200320032003200320032003200320032003200450064006400640042004200420042",
				"0064006400640061003200320032003200320032003200320032003200320032003200320010003200320032",
				"0032003200320032003200320032003200320032003200320032003200320032003200450064006400640058",
				"0032003200460064006400640061003200320032003200320032003200320032003200320032003200320010",
				"0032003200320032003200320032003200320032003200320032003200320032003200320032003200450064",
				"0064006400580032003200460064006400640061003200320032003200320032003200320032003200320032",
				"0032003200100032003200320032003200320032003200320032003200320032003200320032003200320032",
				"0032004500640064006400580032003200460064006400640061003200320032003200320032003200320032",
				"0032003200320032003200100032003200320032003200320032003200320032003200320032003200320032",
				"0032003200320032004500640064006400580032003200460064006400640061003200320032003200320032",
				"0032003200320032003200320032003200100032003200320032003200320032003200320032003200320032",
				"0032003200320032003200320032004500640064006400580032003200460064006400640061003200320032",
				"0010003200320032003200320032003200320032003200320032003200320032003200320032003200320010",
				"0032003200320032003200320032003200320032003200320084010400970110010700320121011101170032",
				"0102011101140032011701150101003200910067008200690068007300840083004500760079007100930032",
				"0010003200320032003200320032003200320032003200320032003200320032003200320032003200320032",
				"003200320032900400320050004900490010003200320032003200320032003200320032003200320032",
			];

			console.log(
				banner
					.join("")
					.match(new RegExp(".{1,4}", "g"))
					.map((r) => String.fromCodePoint(r))
					.join("")
			);
		},
	};
};
